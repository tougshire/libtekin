# Generated by Django 3.2.9 on 2021-12-17 01:28

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the condition ("Good", "Usable with Issues", "Inoperative", etc)', max_length=75, verbose_name='name')),
                ('sort_name', models.CharField(blank=True, help_text='A name for sorting, not normally displayed.  This can be as simple as "A","B", or "C", or something like "D Inoperative"', max_length=25, verbose_name='sort name')),
            ],
            options={
                'ordering': ['sort_name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friendly_name', models.CharField(blank=True, help_text='The friendly name for this person or organization, like "Ben" or "IT"', max_length=25, verbose_name='friendly name')),
                ('full_name', models.CharField(help_text='The full name for this person or organization, like "Benjamin Goldberg" or "Suffolk Information Technology Division"', max_length=75, verbose_name='full name')),
            ],
            options={
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='EntityCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the entity category, like "Person" or "Organization"', max_length=75, verbose_name='name')),
                ('sort_name', models.CharField(blank=True, help_text='A name for sorting, not normally displayed.  This can be as simple as "A","B", or "C", or something like "C Organization"', max_length=25, verbose_name='sort name')),
            ],
            options={
                'ordering': ['sort_name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('common_name', models.CharField(blank=True, help_text='The common name for this piece of equipment, like "Ben\'s Laptop"', max_length=75, verbose_name='common name')),
                ('primary_id', models.CharField(blank=True, help_text='The primary ID used for this item', max_length=100, verbose_name='primary ID')),
                ('primary_id_field', models.CharField(blank=True, choices=[('serial_number', 'Serial Number'), ('service_number', 'Service Number'), ('asset_number', 'Asset Number'), ('common_name', 'Common Name')], help_text='The identifier which is the primary id', max_length=50, verbose_name='primary id is')),
                ('network_name', models.CharField(blank=True, help_text="The item's network name", max_length=100, verbose_name='network name')),
                ('serial_number', models.CharField(blank=True, help_text='The serial number or alternate ID (service tag or asset number) which is used as the serial number', max_length=100, verbose_name='serial number')),
                ('service_number', models.CharField(blank=True, help_text='The serial number or alternate ID (service tag or asset number) which is considered second to the primary ID', max_length=100, verbose_name='service number')),
                ('asset_number', models.CharField(blank=True, help_text='The local inventory number for this item', max_length=100, verbose_name='asset number')),
                ('barcode', models.CharField(blank=True, help_text='The barcode attached to this item', max_length=100, verbose_name='barcode')),
                ('latest_inventory', models.DateField(blank=True, help_text='The date that this item was last confirmed in inventory', null=True, verbose_name='Latest Inventory Date')),
                ('is_deleted', models.BooleanField(default=False, help_text='If this item is deleted', verbose_name='is deleted')),
                ('assignee', models.ForeignKey(blank=True, help_text='The current responsible party for the item', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='item_assigned', to='libtekin.entity', verbose_name='assignee')),
                ('borrower', models.ForeignKey(blank=True, help_text='The current holder the item', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='item_borrowed', to='libtekin.entity', verbose_name='borrower')),
                ('condition', models.ForeignKey(help_text='The condition of this item', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.condition')),
            ],
            options={
                'ordering': ['common_name'],
            },
        ),
        migrations.CreateModel(
            name='LocationCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the location category, like "Library Location"', max_length=75, verbose_name='name')),
                ('sort_name', models.CharField(blank=True, help_text='A name for sorting, not normally displayed.  This can be as simple as "A","B", or "C", or something like "B Library Location"', max_length=25, verbose_name='sort name')),
            ],
            options={
                'ordering': ['sort_name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MmodelCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the category, like "Laptop Computer"', max_length=75, verbose_name='name')),
                ('sort_name', models.CharField(blank=True, help_text='A name for sorting, not normally displayed.  This can be as simple as "A","B", or "C", or something like "B Laptops"', max_length=25, verbose_name='sort name')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ViewItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the search', max_length=50, verbose_name='name')),
                ('is_default', models.BooleanField(default=False, help_text='If this is a default')),
                ('modified', models.DateTimeField(auto_now=True, help_text='The date this search was saved')),
                ('filterstring', models.TextField(blank=True, help_text='The filter string')),
                ('sortstring', models.CharField(blank=True, help_text='The sort string', max_length=100)),
                ('user', models.ForeignKey(help_text='The user of this search', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'ordering': ['modified'],
            },
        ),
        migrations.CreateModel(
            name='Mmodel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand', models.CharField(help_text='The brand name of the item or the manufacturer, or supplier, etc..', max_length=75, verbose_name='brand')),
                ('model_name', models.CharField(help_text='The model name, like "Latitude 3390"', max_length=75, verbose_name='model_name')),
                ('model_number', models.CharField(blank=True, help_text='The model number if different than model name', max_length=75, verbose_name='model_number')),
                ('primary_id_field', models.CharField(blank=True, choices=[('serial_number', 'Serial Number'), ('service_number', 'Service Number'), ('asset_number', 'Asset Number'), ('common_name', 'Common Name')], help_text='By default, the field which should be used as the primary ID field (ex: "SN", "Tag Number", etc)', max_length=50, verbose_name='Primary ID Field')),
                ('categories', models.ManyToManyField(blank=True, help_text='The categories , such as Laptop or Phone, to which this item belongs', to='libtekin.MmodelCategory', verbose_name='categories')),
            ],
            options={
                'verbose_name': 'model',
                'ordering': ['brand', 'model_name'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(blank=True, help_text='The short name for this location, like "MML"', max_length=25, verbose_name='short name')),
                ('full_name', models.CharField(help_text='The full name for this location, like "Morgan Memorial Library', max_length=75, verbose_name='full name')),
                ('category', models.ForeignKey(blank=True, help_text='The category of this location', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.locationcategory', verbose_name='category')),
            ],
            options={
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='TimelyNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='The text of the note', verbose_name='text')),
                ('when', models.DateField(default=datetime.date.today, help_text='The effective date of the note (when it applies as opposed to when it was actually made)', verbose_name='when')),
                ('is_current_status', models.BooleanField(default=False, help_text='If this note is a current status of item, for example if the note says the item is overheating and that is still true', verbose_name='is current status')),
                ('item', models.ForeignKey(help_text='The item to which this note applies', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.item')),
            ],
            options={
                'ordering': ['-when'],
            },
        ),
        migrations.AddField(
            model_name='item',
            name='home',
            field=models.ForeignKey(blank=True, help_text='The home location of this item', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='item_homed', to='libtekin.location', verbose_name='home'),
        ),
        migrations.AddField(
            model_name='item',
            name='location',
            field=models.ForeignKey(blank=True, help_text='The current location of this item', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='item_located', to='libtekin.location', verbose_name='location'),
        ),
        migrations.AddField(
            model_name='item',
            name='mmodel',
            field=models.ForeignKey(blank=True, help_text='The items model', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.mmodel', verbose_name='model'),
        ),
        migrations.AddField(
            model_name='item',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The owner of the item', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='item_owned', to='libtekin.entity', verbose_name='owner'),
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(auto_now_add=True, help_text='The date this change was made', verbose_name='when')),
                ('modelname', models.CharField(help_text='The model to which this change applies', max_length=50, verbose_name='model')),
                ('objectid', models.BigIntegerField(blank=True, help_text='The id of the record that was changed', null=True, verbose_name='object id')),
                ('fieldname', models.CharField(help_text='The that was changed', max_length=50, verbose_name='field')),
                ('old_value', models.TextField(blank=True, help_text='The value of the field before the change', null=True, verbose_name='old value')),
                ('new_value', models.TextField(blank=True, help_text='The value of the field after the change', verbose_name='new value')),
                ('user', models.ForeignKey(help_text='The user who made this change', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-when', 'modelname', 'objectid'),
            },
        ),
        migrations.AddField(
            model_name='entity',
            name='category',
            field=models.ForeignKey(help_text='The type of entity', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.entitycategory'),
        ),
        migrations.AddConstraint(
            model_name='viewitem',
            constraint=models.UniqueConstraint(fields=('user', 'name'), name='unique_view'),
        ),
    ]
