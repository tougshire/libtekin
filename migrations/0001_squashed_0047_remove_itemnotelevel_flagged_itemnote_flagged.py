# Generated by Django 4.2.4 on 2023-09-28 09:28

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import libtekin.models


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# libtekin.migrations.0011_itemnote_merge
# libtekin.migrations.0022_populate_status

class Migration(migrations.Migration):

    replaces = [('libtekin', '0001_initial'), ('libtekin', '0002_auto_20211218_1616'), ('libtekin', '0003_auto_20211218_2007'), ('libtekin', '0004_auto_20211221_2049'), ('libtekin', '0005_delete_vista'), ('libtekin', '0006_rename_itemnote_timelynote'), ('libtekin', '0007_untimednote'), ('libtekin', '0008_alter_mmodelcategory_options'), ('libtekin', '0009_auto_20211225_1451'), ('libtekin', '0010_itemnote'), ('libtekin', '0011_itemnote_merge'), ('libtekin', '0012_auto_20211226_0658'), ('libtekin', '0013_alter_itemnote_details'), ('libtekin', '0014_alter_item_options'), ('libtekin', '0015_auto_20220201_1522'), ('libtekin', '0016_rename_is_major_itemnote_is_current'), ('libtekin', '0017_item_connected_to'), ('libtekin', '0018_item_status'), ('libtekin', '0019_alter_item_status'), ('libtekin', '0020_alter_item_connected_to'), ('libtekin', '0021_auto_20220514_1738'), ('libtekin', '0022_populate_status'), ('libtekin', '0023_rename_status_item_status_old'), ('libtekin', '0024_auto_20220514_1832'), ('libtekin', '0025_auto_20220515_0731'), ('libtekin', '0026_item_installation_date'), ('libtekin', '0027_alter_item_status'), ('libtekin', '0028_alter_item_status'), ('libtekin', '0029_alter_itemnote_when'), ('libtekin', '0030_alter_itemnote_when'), ('libtekin', '0031_alter_itemnote_details'), ('libtekin', '0032_alter_itemnote_options_remove_itemnote_text_and_more'), ('libtekin', '0033_itemnotecategory_alter_item_status_and_more'), ('libtekin', '0034_remove_itemnote_is_current_itemnote_endtext_and_more'), ('libtekin', '0035_alter_itemnote_is_current_status'), ('libtekin', '0036_rename_is_current_status_itemnote_is_status'), ('libtekin', '0037_itemnote_is_current_alter_itemnote_is_status'), ('libtekin', '0038_alter_itemnote_is_current'), ('libtekin', '0039_alter_itemnote_is_current_alter_itemnote_is_status'), ('libtekin', '0040_alter_itemnote_is_current_alter_itemnote_when'), ('libtekin', '0041_itemnotelevel_alter_status_is_active_and_more'), ('libtekin', '0042_itemnote_level'), ('libtekin', '0043_remove_itemnote_is_status'), ('libtekin', '0044_alter_itemnote_is_current'), ('libtekin', '0045_remove_itemnote_is_current_and_more'), ('libtekin', '0046_remove_itemnotelevel_view_by_default_and_more'), ('libtekin', '0047_remove_itemnotelevel_flagged_itemnote_flagged')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the condition ("Good", "Usable with Issues", "Inoperative", etc)', max_length=75, verbose_name='name')),
                ('sort_name', models.CharField(blank=True, help_text='A name for sorting, not normally displayed.  This can be as simple as "A","B", or "C", or something like "D Inoperative"', max_length=25, verbose_name='sort name')),
            ],
            options={
                'ordering': ['sort_name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friendly_name', models.CharField(blank=True, help_text='The friendly name for this person or organization, like "Ben" or "IT"', max_length=25, verbose_name='friendly name')),
                ('full_name', models.CharField(help_text='The full name for this person or organization, like "Benjamin Goldberg" or "Suffolk Information Technology Division"', max_length=75, verbose_name='full name')),
            ],
            options={
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='EntityCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the entity category, like "Person" or "Organization"', max_length=75, verbose_name='name')),
                ('sort_name', models.CharField(blank=True, help_text='A name for sorting, not normally displayed.  This can be as simple as "A","B", or "C", or something like "C Organization"', max_length=25, verbose_name='sort name')),
            ],
            options={
                'ordering': ['sort_name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('common_name', models.CharField(blank=True, help_text='The common name for this piece of equipment, like "Ben\'s Laptop"', max_length=75, verbose_name='common name')),
                ('primary_id', models.CharField(blank=True, help_text='The primary ID used for this item', max_length=100, verbose_name='primary ID')),
                ('primary_id_field', models.CharField(blank=True, choices=[('serial_number', 'Serial Number'), ('service_number', 'Service Number'), ('asset_number', 'Asset Number'), ('common_name', 'Common Name')], help_text='The identifier which is the primary id', max_length=50, verbose_name='primary id is')),
                ('network_name', models.CharField(blank=True, help_text="The item's network name", max_length=100, verbose_name='network name')),
                ('serial_number', models.CharField(blank=True, help_text='The serial number or alternate ID (service tag or asset number) which is used as the serial number', max_length=100, verbose_name='serial number')),
                ('service_number', models.CharField(blank=True, help_text='The serial number or alternate ID (service tag or asset number) which is considered second to the primary ID', max_length=100, verbose_name='service number')),
                ('asset_number', models.CharField(blank=True, help_text='The local inventory number for this item', max_length=100, verbose_name='asset number')),
                ('barcode', models.CharField(blank=True, help_text='The barcode attached to this item', max_length=100, verbose_name='barcode')),
                ('latest_inventory', models.DateField(blank=True, help_text='The date that this item was last confirmed in inventory', null=True, verbose_name='Latest Inventory Date')),
                ('is_deleted', models.BooleanField(default=False, help_text='If this item is deleted', verbose_name='is deleted')),
                ('assignee', models.ForeignKey(blank=True, help_text='The current responsible party for the item', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='item_assigned', to='libtekin.entity', verbose_name='assignee')),
                ('borrower', models.ForeignKey(blank=True, help_text='The current holder the item', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='item_borrowed', to='libtekin.entity', verbose_name='borrower')),
                ('condition', models.ForeignKey(help_text='The condition of this item', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.condition')),
            ],
            options={
                'ordering': ['common_name'],
            },
        ),
        migrations.CreateModel(
            name='LocationCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the location category, like "Library Location"', max_length=75, verbose_name='name')),
                ('sort_name', models.CharField(blank=True, help_text='A name for sorting, not normally displayed.  This can be as simple as "A","B", or "C", or something like "B Library Location"', max_length=25, verbose_name='sort name')),
            ],
            options={
                'ordering': ['sort_name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MmodelCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the category, like "Laptop Computer"', max_length=75, verbose_name='name')),
                ('sort_name', models.CharField(blank=True, help_text='A name for sorting, not normally displayed.  This can be as simple as "A","B", or "C", or something like "B Laptops"', max_length=25, verbose_name='sort name')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ViewItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the search', max_length=50, verbose_name='name')),
                ('is_default', models.BooleanField(default=False, help_text='If this is a default')),
                ('modified', models.DateTimeField(auto_now=True, help_text='The date this search was saved')),
                ('filterstring', models.TextField(blank=True, help_text='The filter string')),
                ('sortstring', models.CharField(blank=True, help_text='The sort string', max_length=100)),
                ('user', models.ForeignKey(help_text='The user of this search', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'ordering': ['modified'],
            },
        ),
        migrations.CreateModel(
            name='Mmodel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand', models.CharField(help_text='The brand name of the item or the manufacturer, or supplier, etc..', max_length=75, verbose_name='brand')),
                ('model_name', models.CharField(help_text='The model name, like "Latitude 3390"', max_length=75, verbose_name='model_name')),
                ('model_number', models.CharField(blank=True, help_text='The model number if different than model name', max_length=75, verbose_name='model_number')),
                ('primary_id_field', models.CharField(blank=True, choices=[('serial_number', 'Serial Number'), ('service_number', 'Service Number'), ('asset_number', 'Asset Number'), ('common_name', 'Common Name')], help_text='By default, the field which should be used as the primary ID field (ex: "SN", "Tag Number", etc)', max_length=50, verbose_name='Primary ID Field')),
                ('categories', models.ManyToManyField(blank=True, help_text='The categories , such as Laptop or Phone, to which this item belongs', to='libtekin.mmodelcategory', verbose_name='categories')),
            ],
            options={
                'verbose_name': 'model',
                'ordering': ['brand', 'model_name'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(blank=True, help_text='The short name for this location, like "MML"', max_length=25, verbose_name='short name')),
                ('full_name', models.CharField(help_text='The full name for this location, like "Morgan Memorial Library', max_length=75, verbose_name='full name')),
                ('category', models.ForeignKey(blank=True, help_text='The category of this location', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.locationcategory', verbose_name='category')),
            ],
            options={
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='TimelyNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='The text of the note', verbose_name='text')),
                ('when', models.DateField(default=datetime.date.today, help_text='The effective date of the note (when it applies as opposed to when it was actually made)', verbose_name='when')),
                ('is_current_status', models.BooleanField(default=False, help_text='If this note is a current status of item, for example if the note says the item is overheating and that is still true', verbose_name='is current status')),
                ('item', models.ForeignKey(help_text='The item to which this note applies', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.item')),
            ],
            options={
                'ordering': ['-when'],
            },
        ),
        migrations.AddField(
            model_name='item',
            name='home',
            field=models.ForeignKey(blank=True, help_text='The home location of this item', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='item_homed', to='libtekin.location', verbose_name='home'),
        ),
        migrations.AddField(
            model_name='item',
            name='location',
            field=models.ForeignKey(blank=True, help_text='The current location of this item', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='item_located', to='libtekin.location', verbose_name='location'),
        ),
        migrations.AddField(
            model_name='item',
            name='mmodel',
            field=models.ForeignKey(blank=True, help_text='The items model', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.mmodel', verbose_name='model'),
        ),
        migrations.AddField(
            model_name='item',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The owner of the item', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='item_owned', to='libtekin.entity', verbose_name='owner'),
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(auto_now_add=True, help_text='The date this change was made', verbose_name='when')),
                ('modelname', models.CharField(help_text='The model to which this change applies', max_length=50, verbose_name='model')),
                ('objectid', models.BigIntegerField(blank=True, help_text='The id of the record that was changed', null=True, verbose_name='object id')),
                ('fieldname', models.CharField(help_text='The that was changed', max_length=50, verbose_name='field')),
                ('old_value', models.TextField(blank=True, help_text='The value of the field before the change', null=True, verbose_name='old value')),
                ('new_value', models.TextField(blank=True, help_text='The value of the field after the change', verbose_name='new value')),
                ('user', models.ForeignKey(help_text='The user who made this change', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-when', 'modelname', 'objectid'),
            },
        ),
        migrations.AddField(
            model_name='entity',
            name='category',
            field=models.ForeignKey(help_text='The type of entity', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.entitycategory'),
        ),
        migrations.AddConstraint(
            model_name='viewitem',
            constraint=models.UniqueConstraint(fields=('user', 'name'), name='unique_view'),
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the role ("Public", "Staff", etc)', max_length=75, verbose_name='name')),
                ('sort_name', models.CharField(blank=True, help_text='A name for sorting, not normally displayed.  This can be as simple as "A","B", or "C", or something like "B Public"', max_length=25, verbose_name='sort name')),
            ],
            options={
                'ordering': ['sort_name', 'name'],
            },
        ),
        migrations.AddField(
            model_name='item',
            name='role',
            field=models.ForeignKey(blank=True, help_text='The roles to which this item belongs', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.role'),
        ),
        migrations.RemoveField(
            model_name='mmodel',
            name='categories',
        ),
        migrations.AddField(
            model_name='mmodel',
            name='category',
            field=models.ForeignKey(blank=True, help_text='The category, such as Laptop or Phone, to which this item belongs', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.mmodelcategory', verbose_name='category'),
        ),
        migrations.CreateModel(
            name='Vista',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(help_text='The name of the model to which this view applies', max_length=50, verbose_name='model name')),
                ('name', models.CharField(help_text='The name of the search', max_length=50, verbose_name='name')),
                ('is_default', models.BooleanField(default=False, help_text='If this is a default')),
                ('modified', models.DateTimeField(auto_now=True, help_text='The date this search was saved')),
                ('filterstring', models.TextField(blank=True, help_text='The filter string')),
                ('sortstring', models.CharField(blank=True, help_text='The sort string', max_length=100)),
                ('fieldlist', models.CharField(blank=True, help_text='The list of fields to show', max_length=500)),
                ('user', models.ForeignKey(help_text='The user of this search', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'ordering': ['modified'],
            },
        ),
        migrations.DeleteModel(
            name='ViewItem',
        ),
        migrations.AddConstraint(
            model_name='vista',
            constraint=models.UniqueConstraint(fields=('user', 'name'), name='unique_vista'),
        ),
        migrations.DeleteModel(
            name='Vista',
        ),
        migrations.CreateModel(
            name='UntimedNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='The text of the note', verbose_name='text')),
                ('subject', models.CharField(blank=True, help_text='The subject of the note', max_length=50, verbose_name='subject')),
                ('is_major', models.BooleanField(default=False, help_text='If this note should be displayed by default (if not then displayed when "show all notes" is selected)', verbose_name='is major')),
                ('item', models.ForeignKey(help_text='The item to which this note applies', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.item')),
            ],
            options={
                'ordering': ['subject'],
            },
        ),
        migrations.AlterModelOptions(
            name='mmodelcategory',
            options={'ordering': ['sort_name']},
        ),
        migrations.AlterField(
            model_name='item',
            name='latest_inventory',
            field=models.DateField(blank=True, default=datetime.date.today, help_text='The date that this item was last confirmed in inventory', null=True, verbose_name='Latest Inventory Date'),
        ),
        migrations.AlterField(
            model_name='item',
            name='primary_id_field',
            field=models.CharField(blank=True, choices=[('serial_number', 'Serial Number'), ('service_number', 'Service Number'), ('asset_number', 'Asset Number'), ('barcode', 'Barcode')], help_text='The identifier which is the primary id', max_length=50, verbose_name='primary id is'),
        ),
        migrations.AlterField(
            model_name='mmodel',
            name='primary_id_field',
            field=models.CharField(blank=True, choices=[('serial_number', 'Serial Number'), ('service_number', 'Service Number'), ('asset_number', 'Asset Number'), ('barcode', 'Barcode')], help_text='By default, the field which should be used as the primary ID field (ex: "SN", "Tag Number", etc)', max_length=50, verbose_name='Primary ID Field'),
        ),
        migrations.CreateModel(
            name='ItemNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateField(blank=True, help_text="Can be blank for notes that don't represent events.  If filled, consider the effective date of the information rather than the date the note was made", null=True, verbose_name='when')),
                ('text', models.CharField(blank=True, help_text='The text of the note.  Can be a subject line or introduction if more is included in details', max_length=125)),
                ('details', models.TextField(help_text='The details of the note if the summary is not sufficient', verbose_name='details')),
                ('is_major', models.BooleanField(default=False, help_text='If this note is diplayed by default in the item detail view.  If not, it will be displayed when "Show All" is selected', verbose_name='is major or current status')),
                ('item', models.ForeignKey(help_text='The item to which this note applies', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.item')),
            ],
            options={
                'ordering': ['-when'],
            },
        ),
        migrations.RunPython(
            code=libtekin.migrations.0011_itemnote_merge.forwards,
        ),
        migrations.RemoveField(
            model_name='untimednote',
            name='item',
        ),
        migrations.AlterModelOptions(
            name='itemnote',
            options={'ordering': ['-when', 'text']},
        ),
        migrations.DeleteModel(
            name='TimelyNote',
        ),
        migrations.DeleteModel(
            name='UntimedNote',
        ),
        migrations.AlterField(
            model_name='itemnote',
            name='details',
            field=models.TextField(blank=True, help_text='The details of the note if the summary is not sufficient', verbose_name='details'),
        ),
        migrations.AlterModelOptions(
            name='item',
            options={'ordering': ['primary_id']},
        ),
        migrations.AddField(
            model_name='item',
            name='essid',
            field=models.CharField(blank=True, help_text="The device's ESSID", max_length=100, verbose_name='ESSID'),
        ),
        migrations.AddField(
            model_name='item',
            name='phone_number',
            field=models.CharField(blank=True, help_text='The phone number of the device', max_length=100, verbose_name='phone_number'),
        ),
        migrations.AlterField(
            model_name='item',
            name='primary_id_field',
            field=models.CharField(blank=True, choices=[('serial_number', 'Serial Number'), ('service_number', 'Service Number'), ('asset_number', 'Asset Number'), ('barcode', 'Barcode'), ('phone_number', 'Phone Number'), ('essid', 'ESSID')], help_text='The identifier which is the primary id', max_length=50, verbose_name='primary id is'),
        ),
        migrations.AlterField(
            model_name='mmodel',
            name='primary_id_field',
            field=models.CharField(blank=True, choices=[('serial_number', 'Serial Number'), ('service_number', 'Service Number'), ('asset_number', 'Asset Number'), ('barcode', 'Barcode'), ('phone_number', 'Phone Number'), ('essid', 'ESSID')], help_text='By default, the field which should be used as the primary ID field (ex: "SN", "Tag Number", etc)', max_length=50, verbose_name='Primary ID Field'),
        ),
        migrations.RenameField(
            model_name='itemnote',
            old_name='is_major',
            new_name='is_current',
        ),
        migrations.AddField(
            model_name='item',
            name='status',
            field=models.IntegerField(choices=[(0, 'Removed from Inventory'), (1, 'Not Yet Received'), (2, 'Awaiting Removal'), (3, 'Stored'), (10, 'Ready'), (11, 'In Use')], default=11, help_text='The status of this item', verbose_name='status'),
        ),
        migrations.AddField(
            model_name='item',
            name='connected_to',
            field=models.ForeignKey(blank=True, help_text='For peripherals and components, the device to which this item is connected. For example, if this item is a monitor, choose its computer.  If this is the computer, do not enter the monitor here', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='connection', to='libtekin.item', verbose_name='connected to'),
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The status of the load', max_length=50)),
                ('list_order', models.IntegerField(default=1000, help_text='The order that this status should display in a list of statuses', verbose_name='rank')),
                ('is_active', models.BooleanField(default=False, help_text='If this status is for an active project (one that is not yet complete or canceled and should be displayed in the default list)', verbose_name='is active')),
                ('is_default', models.BooleanField(default=False, help_text='If this is the default status for new loads (Only one will used even if more than one is selected)', verbose_name='is default')),
            ],
            options={
                'ordering': ('list_order', 'name'),
            },
        ),
        migrations.AddField(
            model_name='item',
            name='status_new',
            field=models.ForeignKey(help_text='The status of this project', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.status'),
        ),
        migrations.RunPython(
            code=libtekin.migrations.0022_populate_status.forwards_func,
        ),
        migrations.RenameField(
            model_name='item',
            old_name='status',
            new_name='status_old',
        ),
        migrations.RenameField(
            model_name='item',
            old_name='status_new',
            new_name='status',
        ),
        migrations.RemoveField(
            model_name='item',
            name='status_old',
        ),
        migrations.AlterModelOptions(
            name='status',
            options={'ordering': ('list_position', 'name')},
        ),
        migrations.RenameField(
            model_name='status',
            old_name='list_order',
            new_name='list_position',
        ),
        migrations.AddField(
            model_name='item',
            name='installation_date',
            field=models.DateField(blank=True, default=datetime.date.today, help_text='The date that this item was installed', null=True, verbose_name='Installation Date'),
        ),
        migrations.AlterField(
            model_name='item',
            name='status',
            field=models.ForeignKey(default=1, help_text='The status of this project', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.status'),
        ),
        migrations.AlterField(
            model_name='item',
            name='status',
            field=models.ForeignKey(default=libtekin.models.get_default_status, help_text='The status of this project', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.status'),
        ),
        migrations.AlterField(
            model_name='itemnote',
            name='when',
            field=models.DateField(blank=True, default=datetime.datetime.now, help_text="Can be blank for notes that don't represent events.  If filled, consider the effective date of the information rather than the date the note was made", null=True, verbose_name='when'),
        ),
        migrations.AlterField(
            model_name='itemnote',
            name='when',
            field=models.DateField(blank=True, default=datetime.date.today, help_text="Can be blank for notes that don't represent events.  If filled, consider the effective date of the information rather than the date the note was made", null=True, verbose_name='when'),
        ),
        migrations.AlterField(
            model_name='itemnote',
            name='details',
            field=models.TextField(blank=True, help_text='The details of the note if the summary text is not sufficient', verbose_name='details'),
        ),
        migrations.AlterModelOptions(
            name='itemnote',
            options={'ordering': ['-when']},
        ),
        migrations.RenameField(
            model_name='itemnote',
            old_name='text',
            new_name='maintext',
        ),
        migrations.AlterField(
            model_name='itemnote',
            name='maintext',
            field=models.CharField(blank=True, help_text='The text of the note.  Can be a subject line or introduction if more is included in details', max_length=125, verbose_name='description'),
        ),
        migrations.CreateModel(
            name='ItemNoteCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The category name', max_length=50, verbose_name='Name')),
            ],
        ),
        migrations.AlterField(
            model_name='item',
            name='status',
            field=models.ForeignKey(default=libtekin.models.get_default_status, help_text='The status of this item', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.status'),
        ),
        migrations.AddField(
            model_name='itemnote',
            name='itemnotecategory',
            field=models.ForeignKey(blank=True, help_text='The optional category for this note', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.itemnotecategory', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='itemnote',
            name='endtext',
            field=models.CharField(blank=True, help_text='For temporary situations, comments regarding the end of the situation (ex: "memory card replaced")', max_length=125, verbose_name='end comment'),
        ),
        migrations.AlterField(
            model_name='itemnote',
            name='details',
            field=models.TextField(blank=True, help_text='The details of the note if the description text is not sufficient', verbose_name='details'),
        ),
        migrations.AlterField(
            model_name='itemnote',
            name='maintext',
            field=models.CharField(blank=True, help_text='The text of the note.  Optional if a category is chosen and no other details are necessary.', max_length=125, verbose_name='description'),
        ),
        migrations.RenameField(
            model_name='itemnote',
            old_name='is_current',
            new_name='is_status',
        ),
        migrations.AlterField(
            model_name='itemnote',
            name='when',
            field=models.DateField(blank=True, default=datetime.date.today, help_text='The effective date of the information in the note ( rather than the date the note was made )', null=True, verbose_name='when'),
        ),
        migrations.CreateModel(
            name='ItemNoteLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the level', max_length=50)),
                ('number', models.IntegerField(default=0, help_text='The value of the level, with 0 being info only and a higher number, such as 5 being critical', verbose_name='numeric value')),
            ],
            options={
                'ordering': ('number', 'name'),
            },
        ),
        migrations.AlterField(
            model_name='status',
            name='is_active',
            field=models.BooleanField(default=False, help_text='If this status is for an active item)', verbose_name='is active'),
        ),
        migrations.AlterField(
            model_name='status',
            name='is_default',
            field=models.BooleanField(default=False, help_text='If this is the default status for new items (Only one will used even if more than one is selected)', verbose_name='is default'),
        ),
        migrations.AlterField(
            model_name='status',
            name='name',
            field=models.CharField(help_text='The status of the item', max_length=50),
        ),
        migrations.AddField(
            model_name='itemnote',
            name='level',
            field=models.ForeignKey(default=libtekin.models.get_default_level, help_text='The level of this note', null=True, on_delete=django.db.models.deletion.SET_NULL, to='libtekin.itemnotelevel'),
        ),
        migrations.RemoveField(
            model_name='itemnote',
            name='is_status',
        ),
        migrations.AddField(
            model_name='itemnote',
            name='flagged',
            field=models.IntegerField(choices=[(1, 'Yes'), (0, 'No')], default=0, help_text='If this note is flagged for viewing by default in an item detail view', verbose_name='flagged'),
        ),
    ]
